package com.mahozi.sayed.comparisist.products.database

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.room.withTransaction
import com.mahozi.sayed.comparisist.products.create.ProductFormModel
import com.mahozi.sayed.comparisist.AppDatabase
import com.mahozi.sayed.comparisist.Resource
import com.mahozi.sayed.comparisist.products.database.brand.BrandEntity
import com.mahozi.sayed.comparisist.prices.database.PriceEntity
import com.mahozi.sayed.comparisist.products.create.ProductService
import com.mahozi.sayed.comparisist.products.database.product.ProductDto
import com.mahozi.sayed.comparisist.products.database.product.ProductEntity
import com.mahozi.sayed.comparisist.products.database.product.ProductWithBrand
import com.mahozi.sayed.comparisist.products.database.store.StoreEntity
import com.mahozi.sayed.comparisist.products.database.product.ProductResponse
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.Retrofit
import java.lang.Exception

class ProductsRepository(private val database: AppDatabase, private val retrofit: Retrofit) {

    private val brandDao = database.brandDao
    private val priceDao = database.priceDao
    private val productDao = database.productDao
    private val storeDao = database.storeDao


    fun selectAllProductsAndPrices(): LiveData<List<ProductDto>>{

        return productDao.selectAllProductsAndPrices()
    }




    suspend fun insertProduct(productFormModel: ProductFormModel){

        database.withTransaction {

            //TODO clean uP 7uP
            var brandId = brandDao.selectIdBy(productFormModel.brandName)

            if (brandId == null){

                brandId = brandDao.insert(BrandEntity(productFormModel.brandName))
            }


            var productId = productDao.selectIdBy(
                productFormModel.productName,
                brandId,
                productFormModel.size,
                productFormModel.sizeUnit)

            if (productId == null){

                productId = productDao.insert(
                    ProductEntity(
                        productFormModel.productName,
                        brandId,
                        productFormModel.size,
                        productFormModel.sizeUnit,
                        productFormModel.productImagePath,
                        productFormModel.barcode
                    )
                )
            }

            var storeId = storeDao.selectIdBy(productFormModel.storeName)

            if (storeId == null){

                storeId = storeDao.insert(StoreEntity(productFormModel.storeName))
            }


            priceDao.insert(
                PriceEntity(
                productId,
                productFormModel.price,
                storeId,
                productFormModel.quantity,
                productFormModel.isDeal,
                productFormModel.dateAdded
                )
            )
        }
    }


    suspend fun selectProductBy(barcode: String): Resource<ProductWithBrand>{

        try {

            var productWithBrand = selectProductWithBrandLocallyBy(barcode)

            //if product not available locally
            if (productWithBrand == null){

                val productResponse = getProductFromService(barcode)


                //check if product available in database
                if (productResponse.status == "0") {

                    return Resource.error("Product not found")
                }

                productWithBrand = mapProductResponseToProductWithBrand(productResponse, barcode)
            }

            return Resource.success(productWithBrand)
        }

        catch (e: Exception){

            return Resource.error("No internet")

        }

    }


    private suspend fun selectProductWithBrandLocallyBy(barcode: String): ProductWithBrand? = withContext(Dispatchers.IO){

        return@withContext productDao.selectProductWithBrandBy(barcode)
    }


    private suspend fun getProductFromService(barcode: String): ProductResponse = withContext(Dispatchers.IO){

        Log.d("gggg", "getProductFromService: ")
        val productService = retrofit.create(ProductService::class.java)

        return@withContext productService.selectProductByBarcode(barcode)

    }

    private fun mapProductResponseToProductWithBrand(productResponse: ProductResponse, barcode: String): ProductWithBrand{

        val imagePath = (productResponse.productInfo.imageUrl)

        val name = (productResponse.productInfo.productName)
        val brand = (productResponse.productInfo.brandName)

        val sizeAndUnit = productResponse.productInfo.sizeAndUnit.split(" ")

        val size = (sizeAndUnit[0])
        val unit = (sizeAndUnit[1])

        //id is 0 because product will be inserted locally by Room which takes 0 for autogenerated id
        return ProductWithBrand(0L, name, brand, size.toDouble(), unit, imagePath, barcode)
    }


}